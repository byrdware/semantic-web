#!/usr/bin/env node

/////////////////////////////////////////////////////////////////////////////// 
// Simplified Web ID Provider Microservice
// www - Server Startup Script
//
// Copyright (c) 2018 Ted Byrd
// All Rights Reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
/////////////////////////////////////////////////////////////////////////////// 

'use strict';

//////////////////////////////////////////////////////////////////////////////// 
// Modules
//////////////////////////////////////////////////////////////////////////////// 

const app = require('../app');
const debug = require('debug')('semantic-web:webid:server');
const fs = require('fs');
const http = require('http');
const https = require('https');
const exitHook = require('async-exit-hook');
const pkg = require('../package.json');
const config = app.get('config');
const log = app.get('log');
const pmx = app.get('pmx');

/////////////////////////////////////////////////////////////////////////////// 
// App start up complete, emit app info to log, commence server startup
/////////////////////////////////////////////////////////////////////////////// 

log.info(`Application: ${pkg.name}, ${pkg.version}, ${pkg.description}`);
log.info(`File: ${__filename}`);

/////////////////////////////////////////////////////////////////////////////// 
// Exit handler
/////////////////////////////////////////////////////////////////////////////// 

exitHook(() => {
  log.info('Shutdown request received');
  if (app.get('mongo.connection')) {
    debug('Closing connection to MongoDB');
    app.get('mongo.connection').close();
  }
  if (app.get('mongo.connect-interval')) {
    debug('Aborting connection attempts to MongoDB');
    clearInterval(app.get('mongo.connect-interval'));
  }
  debug('Exit hook complete, shutdown will now proceed');
});

/////////////////////////////////////////////////////////////////////////////// 
// Create PMX Probes
/////////////////////////////////////////////////////////////////////////////// 

// Count redirects from HTTP to HTTPS
const redirects = pmx.probe().counter({
  name : 'HTTP to HTTPS Redirects'
});

/////////////////////////////////////////////////////////////////////////////// 
// Create HTTPS server
/////////////////////////////////////////////////////////////////////////////// 

if (!fs.existsSync(config.service.secure.key)) {
  log.error('Can\'t find Server key: ' + config.service.secure.key);
  process.exit(1);
}

if (!fs.existsSync(config.service.secure.certificate)) {
  log.error('Can\'t find Server certificate: ' + config.service.secure.certificate);
  process.exit(1);
}

if (config.service.secure.ca && config.service.secure.ca.length && !fs.existsSync(config.service.secure.ca[0])) {
  log.error('Can\'t find CA certificate: ' + config.service.secure.ca[0]);
  process.exit(1);
}

var credentials = {
  key: fs.readFileSync(config.service.secure.key, 'utf8'),
  cert: fs.readFileSync(config.service.secure.certificate, 'utf8'),
  ca: []
};

if (config.service.secure.ca && config.service.secure.ca.length) {
  config.service.secure.ca.forEach((cert) => {
    credentials.ca.push(fs.readFileSync(cert));
  });
}

var securePort = normalizePort(config.service.secure.port || 443);
var secureServer = https.createServer(credentials, app).listen(securePort);

secureServer.on('error',onSecureError);
secureServer.on('listening', onSecureListening);

/////////////////////////////////////////////////////////////////////////////// 
// Event listener for HTTPS server "error" event.
/////////////////////////////////////////////////////////////////////////////// 

function onSecureError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof securePort === 'string' ? 'Secure pipe ' + securePort : 'Secure port ' + securePort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/////////////////////////////////////////////////////////////////////////////// 
// Event listener for HTTPS server "listening" event.
/////////////////////////////////////////////////////////////////////////////// 

function onSecureListening() {
  var addr = secureServer.address();
  var bind = typeof addr === 'string' ? 'secure pipe ' + addr : 'secure port ' + addr.port;
  log.info('Listening on %s', bind);
}

/////////////////////////////////////////////////////////////////////////////// 
// Create HTTP server; redirects to HTTPS server
/////////////////////////////////////////////////////////////////////////////// 

if (config.service.port) {
  var server = http.createServer((req,res) => {
    redirects.inc();
    var url = 'https://' + req.headers.host;
    url = url.replace(/:[0-9]+$/, '');
    if (securePort !== 443) {
      url += ':' + securePort;
    }
    url += req.url;
    res.writeHead(301, { 'Location': url });
    res.end();
  });

  var port = normalizePort(config.service.port);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/////////////////////////////////////////////////////////////////////////////// 
// Event listener for HTTP server "error" event.
/////////////////////////////////////////////////////////////////////////////// 

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/////////////////////////////////////////////////////////////////////////////// 
// Event listener for HTTP server "listening" event.
/////////////////////////////////////////////////////////////////////////////// 

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  log.info('Listening on %s', bind);
}

/////////////////////////////////////////////////////////////////////////////// 
// Normalize a port into a number, string, or boolean (false).
/////////////////////////////////////////////////////////////////////////////// 

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

///////////////////////////////////////////////////////////////////////////////
// End of File
///////////////////////////////////////////////////////////////////////////////
